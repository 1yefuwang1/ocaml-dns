OASISFormat: 0.3
OCamlVersion: >= 3.12
Name:        dns
Version:     0.5.2
Authors:     Anil Madhavapeddy, Tim Deegan, Richard Mortier, Haris Rotsos
License:     LGPL-2.0 with OCaml linking exception
Synopsis:    DNS protocol library
Plugins:     META (0.3)
BuildTools:  ocamlbuild

Flag lwt
  Description: build the Lwt library
  Default: false

Flag async
  Description: build the Core/Async library
  Default: false

Flag mirage
  Description: build the Mirage library
  Default: false

Flag nettests
  Description: run the internet-using tests
  Default: false

Library dns
  Path: lib 
  Findlibname: dns
  Pack: true
  Modules: 
    Base64, Hashcons, Loader, Name, Operators, Packet, Query, RR, Trie, 
    Zone, Zone_lexer, Zone_parser, Resolvconf
  BuildDepends:	cstruct (>= 0.5.1), cstruct.syntax, re, re.str

Library lwt
  Path: lwt
  Build$: flag(lwt)
  Install$: flag(lwt)
  Findlibname: lwt
  CSources:   binding_crypto.c
  CCLib:      -lssl -lcrypto
  Modules: Dns_server, Dns_resolver, Sec, Rsa
  BuildDepends: 
    lwt.unix, lwt.syntax, cstruct, cstruct.syntax, dns, cryptokit
  FindlibParent: dns

Document dns
  Title:                DNS docs
  Type:                 ocamlbuild (0.3)
  BuildTools+:          ocamldoc
  XOCamlbuildPath:      lib  
  XOCamlbuildModules:     
    Base64, Hashcons, Loader, Name, Operators, Packet, Query, RR, Trie, 
    Zone, Zone_lexer, Zone_parser

Document dns_lwt
  Title:                DNS Lwt docs
  Type:                 ocamlbuild (0.3)
  BuildTools+:          ocamldoc
  Build$:               flag(lwt)
  XOCamlbuildPath:      lwt
  XOCamlbuildModules:   Dns_resolver, Dns_server

Executable lwt_server
  Path:               lib_test
  MainIs:             lwt_server.ml
  Build$:             flag(tests) && flag(lwt)
  Custom:             true
  CompiledObject:     best
  Install:            false
  BuildDepends:       lwt, lwt.unix, re, re.str, dns, dns.lwt

Executable time_server
  Path:               lib_test
  MainIs:             time_server.ml
  Build$:             flag(tests) && flag(lwt)
  Custom:             true
  CompiledObject:     best
  Install:            false
  BuildDepends:       lwt, lwt.unix, re, re.str, dns.lwt

Executable mldig
  Path:               lwt
  MainIs:             mldig.ml
  Build$:             flag(tests) && flag(lwt)
  Custom:             true
  CompiledObject:     best
  Install:            false
  BuildDepends:       lwt, lwt.unix, lwt.syntax, dns, re, re.str, cstruct, uri, cmdliner

Executable load_key
  Path:               lib_test
  MainIs:             load_key.ml
  Build$:             flag(tests) && flag(lwt)
  CSources:   binding_crypto.c
  CCLib:      -lssl -lcrypto
  Custom:             true
  CompiledObject:     best
  Install:            false
  BuildDepends:       lwt, lwt.unix, lwt.syntax, re, re.str, uri, cstruct, cryptokit


Test lwt_server
  Run$:               flag(tests) && flag(lwt)
  Command:            $lwt_server
  WorkingDirectory:   lib_test
